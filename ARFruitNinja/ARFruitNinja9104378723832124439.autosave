import org.openkinect.freenect.*;
import org.openkinect.freenect2.*;
import org.openkinect.processing.*;
import org.openkinect.tests.*;
import org.openkinect.processing.*;

/********* VARIABLES *********/


// What is the kinect's angle
float angle;

PImage background;
color circleColor = color(0);
int gameScreen = 0;
int playerHandX, playerHandY;
int handSize = 20;
Kinect kinect;
boolean fullscreen = false;
int Swidth = 1280; 
int Sheight = 800;
KinectTracker tracker;
PImage img;
/********* SETUP BLOCK *********/

void setup() 
{ 
  frameRate(90);
  size(1280,800);
  //fullScreen();
  noStroke();
  smooth();
  
  background = loadImage("test.jpg");
  kinect = new Kinect(this);
  tracker = new KinectTracker();
  
  
} 

void draw() 
{
  if (gameScreen == 0) 
  {
    initScreen();
  } 
  else if (gameScreen == 1) 
  {
    gameScreen();
  } 
  else if (gameScreen == 2) 
  {
    gameOverScreen();
  }
  tracker.track();
  // Show the image
  tracker.display();

  // Let's draw the raw location
  PVector v1 = tracker.getPos();
  fill(50, 100, 250, 200);
  noStroke();
  ellipse(v1.x, v1.y, 20, 20);

  // Let's draw the "lerped" location
  PVector v2 = tracker.getLerpedPos();
  fill(100, 250, 50, 200);
  noStroke();
  ellipse(v2.x, v2.y, 20, 20);

  // Display some info
  int t = tracker.getThreshold();
  fill(0);
  text("threshold: " + t + "    " +  "framerate: " + int(frameRate) + "    " + 
    "UP increase threshold, DOWN decrease threshold", 10, 500);

}


/********* SCREEN CONTENTS *********/

void initScreen() 
{
  background(0);
  textAlign(CENTER);
  text("Click to start", width/2, height/2);
}


void gameScreen() 
{
  background(background);
  spawnNewFruit();
  timer.timeDec();
  drawHandCircle();
  
  fruit.update();
  
}





// Adjust the angle and the depth threshold min and max
void keyPressed() {
  int t = tracker.getThreshold();
  if (key == CODED) {
    if (keyCode == UP) {
      t+=5;
      tracker.setThreshold(t);
    } else if (keyCode == DOWN) {
      t-=5;
      tracker.setThreshold(t);
    }
  }
}
